<?php

namespace App\Console\Commands;

use App\Services\PbxApiService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;

class TestMegafonApi extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'megafon:test-api 
                            {--send-test : –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –≤ API}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ú–µ–≥–∞—Ñ–æ–Ω–∞';

    private PbxApiService $pbxService;

    public function __construct(PbxApiService $pbxService)
    {
        parent::__construct();
        $this->pbxService = $pbxService;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ú–µ–≥–∞—Ñ–æ–Ω–∞...');

        $baseUrl = config('pbx.api.base_url', 'https://7280019.megapbx.ru/crmapi/v1');
        $token = config('pbx.api.token', '5bb722db-43b2-4a8a-a0d5-29f320ae8d0a');

        $this->info("üì° URL: {$baseUrl}");
        $this->info("üîë Token: {$token}");

        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        $this->info("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...");
        $this->testApiAvailability($baseUrl);

        // –¢–µ—Å—Ç 2: –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        $this->info("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
        $this->testAuthorizationMethods($baseUrl, $token);

        // –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        if ($this->option('send-test')) {
            $this->info("\n3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫...");
            $this->sendTestCall();
        }

        $this->info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
     */
    private function testApiAvailability(string $baseUrl): void
    {
        try {
            $response = Http::timeout(10)->get($baseUrl);
            
            $this->info("   –°—Ç–∞—Ç—É—Å: {$response->status()}");
            $this->info("   –û—Ç–≤–µ—Ç: " . substr($response->body(), 0, 100) . "...");
            
            if ($response->status() === 301 || $response->status() === 302) {
                $this->warn("   ‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç: " . $response->header('Location'));
            }
            
        } catch (\Throwable $e) {
            $this->error("   ‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    private function testAuthorizationMethods(string $baseUrl, string $token): void
    {
        $methods = [
            'Bearer Token' => ['Authorization' => "Bearer {$token}"],
            'Token' => ['Authorization' => "Token {$token}"],
            'X-API-Key' => ['X-API-Key' => $token],
            'X-API-Token' => ['X-API-Token' => $token],
            'X-Auth-Token' => ['X-Auth-Token' => $token],
        ];

        foreach ($methods as $name => $headers) {
            $this->info("   –¢–µ—Å—Ç–∏—Ä—É–µ–º: {$name}");
            
            try {
                $response = Http::withHeaders($headers)
                    ->timeout(10)
                    ->get($baseUrl . '/calls');
                
                $this->info("     –°—Ç–∞—Ç—É—Å: {$response->status()}");
                $this->info("     –û—Ç–≤–µ—Ç: " . substr($response->body(), 0, 50) . "...");
                
                if ($response->successful()) {
                    $this->info("     ‚úÖ –£—Å–ø–µ—à–Ω–æ!");
                    return;
                }
                
            } catch (\Throwable $e) {
                $this->error("     ‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage());
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
     */
    private function sendTestCall(): void
    {
        $testCall = [
            'cmd' => 'history',
            'callid' => 'test_' . time(),
            'start' => '20250901T091500Z',
            'type' => 'incoming',
            'status' => 'answered',
            'phone' => '+74951234567',
            'user' => 'user_001',
            'diversion' => '+74959876543',
            'duration' => 180,
            'wait' => 5,
            'link' => 'https://example.com/record.mp3'
        ];

        $this->info("   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫: " . $testCall['callid']);
        
        $success = $this->pbxService->sendCallToMegafon($testCall);
        
        if ($success) {
            $this->info("   ‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
        } else {
            $this->error("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤–æ–Ω–∫–∞");
        }
    }
}
