<?php

namespace App\Console\Commands;

use App\Models\Call;
use Illuminate\Console\Command;
use Carbon\Carbon;

class CallsStats extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'calls:stats|cs {--period= : –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (today, week, month, year)}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–≤–æ–Ω–∫–∞–º';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $period = $this->option('period') ?? 'month';
        
        $this->info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ {$period}");
        $this->newLine();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        $dateFrom = $this->getDateFrom($period);
        $dateTo = Carbon::now();

        $this->info("üìÖ –ü–µ—Ä–∏–æ–¥: {$dateFrom->format('d.m.Y H:i')} - {$dateTo->format('d.m.Y H:i')}");
        $this->newLine();

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        $totalCalls = Call::whereBetween('datetime', [$dateFrom, $dateTo])->count();
        $this->info("üìû –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: {$totalCalls}");

        if ($totalCalls === 0) {
            $this->warn('‚ö†Ô∏è –ó–≤–æ–Ω–∫–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return 0;
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        $incomingCalls = Call::whereBetween('datetime', [$dateFrom, $dateTo])
            ->where('type', 'in')->count();
        $outgoingCalls = Call::whereBetween('datetime', [$dateFrom, $dateTo])
            ->where('type', 'out')->count();

        $this->info("üì• –í—Ö–æ–¥—è—â–∏–µ: {$incomingCalls} (" . round($incomingCalls / $totalCalls * 100, 1) . "%)");
        $this->info("üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ: {$outgoingCalls} (" . round($outgoingCalls / $totalCalls * 100, 1) . "%)");

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        $this->newLine();
        $this->info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:");
        
        $statuses = Call::whereBetween('datetime', [$dateFrom, $dateTo])
            ->selectRaw('status, count(*) as count')
            ->groupBy('status')
            ->get();

        foreach ($statuses as $status) {
            $percentage = round($status->count / $totalCalls * 100, 1);
            $statusName = $this->getStatusName($status->status);
            $this->line("   {$statusName}: {$status->count} ({$percentage}%)");
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        $this->newLine();
        $this->info("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:");
        
        $users = Call::whereBetween('datetime', [$dateFrom, $dateTo])
            ->selectRaw('user_pbx, count(*) as count')
            ->groupBy('user_pbx')
            ->orderByDesc('count')
            ->get();

        foreach ($users as $user) {
            $percentage = round($user->count / $totalCalls * 100, 1);
            $this->line("   {$user->user_pbx}: {$user->count} ({$percentage}%)");
        }

        // –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        $avgDuration = Call::whereBetween('datetime', [$dateFrom, $dateTo])
            ->where('duration', '>', 0)
            ->avg('duration');

        if ($avgDuration) {
            $this->newLine();
            $this->info("‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞: " . round($avgDuration) . " —Å–µ–∫ (" . round($avgDuration / 60, 1) . " –º–∏–Ω)");
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        $this->newLine();
        $this->info("üîó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:");
        
        $sources = Call::whereBetween('datetime', [$dateFrom, $dateTo])
            ->selectRaw('from_source_name, count(*) as count')
            ->groupBy('from_source_name')
            ->get();

        foreach ($sources as $source) {
            $percentage = round($source->count / $totalCalls * 100, 1);
            $this->line("   {$source->from_source_name}: {$source->count} ({$percentage}%)");
        }

        return 0;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
     *
     * @param string $period
     * @return Carbon
     */
    private function getDateFrom(string $period): Carbon
    {
        switch ($period) {
            case 'today':
                return Carbon::today();
            case 'week':
                return Carbon::now()->startOfWeek();
            case 'month':
                return Carbon::now()->startOfMonth();
            case 'year':
                return Carbon::now()->startOfYear();
            default:
                return Carbon::now()->startOfMonth();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     *
     * @param string $status
     * @return string
     */
    private function getStatusName(string $status): string
    {
        $statusNames = [
            'success' => '–£—Å–ø–µ—à–Ω—ã–µ',
            'missed' => '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ',
            'cancel' => '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ',
            'busy' => '–ó–∞–Ω—è—Ç–æ',
            'not_available' => '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'not_allowed' => '–ó–∞–ø—Ä–µ—â–µ–Ω–æ',
            'not_found' => '–ù–µ –Ω–∞–π–¥–µ–Ω',
        ];

        return $statusNames[$status] ?? $status;
    }
}
