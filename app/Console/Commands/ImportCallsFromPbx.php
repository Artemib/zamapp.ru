<?php

namespace App\Console\Commands;

use App\Models\Call;
use App\Services\PbxApiService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class ImportCallsFromPbx extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'pbx:import-calls 
                            {--month= : –ú–µ—Å—è—Ü –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM)}
                            {--force : –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–≤–æ–Ω–∫–∏}
                            {--test : –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ}
                            {--demo : –î–µ–º–æ —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ò–º–ø–æ—Ä—Ç –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –ê–¢–° –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö';

    private PbxApiService $pbxService;

    public function __construct(PbxApiService $pbxService)
    {
        parent::__construct();
        $this->pbxService = $pbxService;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –ê–¢–°...');

        // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if ($this->option('test')) {
            return $this->testConnection();
        }

        // –î–µ–º–æ —Ä–µ–∂–∏–º
        if ($this->option('demo')) {
            return $this->importDemoData();
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        $month = $this->option('month');
        if ($month) {
            try {
                $dateFrom = Carbon::createFromFormat('Y-m', $month)->startOfMonth();
                $dateTo = Carbon::createFromFormat('Y-m', $month)->endOfMonth();
            } catch (\Exception $e) {
                $this->error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-09)');
                return 1;
            }
        } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–Ω—Ç—è–±—Ä—å 2025
            $dateFrom = Carbon::create(2025, 9, 1, 0, 0, 0);
            $dateTo = Carbon::create(2025, 9, 30, 23, 59, 59);
        }

        $this->info("üìÖ –ü–µ—Ä–∏–æ–¥ –∏–º–ø–æ—Ä—Ç–∞: {$dateFrom->format('d.m.Y')} - {$dateTo->format('d.m.Y')}");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (!$this->testConnection()) {
            return 1;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–≤–æ–Ω–∫–∏ –∏–∑ API
        $this->info('üìû –ü–æ–ª—É—á–∞–µ–º –∑–≤–æ–Ω–∫–∏ –∏–∑ –ê–¢–°...');
        $calls = $this->pbxService->getCalls($dateFrom, $dateTo);

        if ($calls === null) {
            $this->error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ê–¢–°');
            return 1;
        }

        if (empty($calls)) {
            $this->warn('‚ö†Ô∏è  –ó–≤–æ–Ω–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return 0;
        }

        $this->info("üìä –ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: " . count($calls));

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–≤–æ–Ω–∫–∏
        $imported = $this->importCalls($calls, $this->option('force'));

        $this->info("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {$imported['processed']}, –î–æ–±–∞–≤–ª–µ–Ω–æ: {$imported['created']}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {$imported['updated']}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {$imported['skipped']}");

        return 0;
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
     */
    private function testConnection(): int
    {
        $this->info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ê–¢–°...');

        if ($this->pbxService->testConnection()) {
            $this->info('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ê–¢–° —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            return 0;
        } else {
            $this->error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ê–¢–°');
            return 1;
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
     */
    private function importDemoData(): int
    {
        $this->info('üé≠ –î–µ–º–æ —Ä–µ–∂–∏–º: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');

        $calls = $this->pbxService->getTestCalls();
        $this->info("üìä –¢–µ—Å—Ç–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: " . count($calls));

        $imported = $this->importCalls($calls, $this->option('force'));

        $this->info("‚úÖ –î–µ–º–æ –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {$imported['processed']}, –î–æ–±–∞–≤–ª–µ–Ω–æ: {$imported['created']}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {$imported['updated']}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {$imported['skipped']}");

        return 0;
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –∑–≤–æ–Ω–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    private function importCalls(array $calls, bool $force = false): array
    {
        $stats = [
            'processed' => 0,
            'created' => 0,
            'updated' => 0,
            'skipped' => 0,
        ];

        $progressBar = $this->output->createProgressBar(count($calls));
        $progressBar->start();

        DB::transaction(function () use ($calls, $force, &$stats, $progressBar) {
            foreach ($calls as $callData) {
                $stats['processed']++;

                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–≤–æ–Ω–æ–∫
                    $existingCall = Call::where('callid', $callData['callid'] ?? '')->first();

                    if ($existingCall && !$force) {
                        $stats['skipped']++;
                        $progressBar->advance();
                        continue;
                    }

                    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    $callAttributes = $this->prepareCallData($callData);

                    if ($existingCall && $force) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–≤–æ–Ω–æ–∫
                        $existingCall->update($callAttributes);
                        $stats['updated']++;
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫
                        Call::create($callAttributes);
                        $stats['created']++;
                    }

                } catch (\Exception $e) {
                    $callId = $callData['callid'] ?? 'unknown';
                    $this->error("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–≤–æ–Ω–∫–∞ {$callId}: " . $e->getMessage());
                }

                $progressBar->advance();
            }
        });

        $progressBar->finish();
        $this->newLine();

        return $stats;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
     */
    private function prepareCallData(array $callData): array
    {
        return [
            'callid' => $callData['callid'] ?? '',
            'datetime' => $this->parseDateTime($callData['datetime'] ?? null),
            'type' => $this->mapCallType($callData['type'] ?? null),
            'status' => $this->mapCallStatus($callData['status'] ?? null),
            'client_phone' => $callData['client_phone'] ?? '',
            'user_pbx' => $callData['user_pbx'] ?? '',
            'diversion_phone' => $callData['diversion_phone'] ?? '',
            'duration' => (int)($callData['duration'] ?? 0),
            'wait' => (int)($callData['wait'] ?? 0),
            'link_record_pbx' => $callData['link_record_pbx'] ?? null,
            'link_record_crm' => $callData['link_record_crm'] ?? null,
            'transcribation' => $callData['transcribation'] ?? null,
            'from_source_name' => $callData['from_source_name'] ?? 'PBX API',
        ];
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
     */
    private function parseDateTime(?string $datetime): ?Carbon
    {
        if (empty($datetime)) {
            return null;
        }

        try {
            return Carbon::parse($datetime);
        } catch (\Exception $e) {
            return null;
        }
    }

    /**
     * –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞
     */
    private function mapCallType(?string $type): ?string
    {
        if (empty($type)) {
            return null;
        }

        $mapping = config('pbx.type_mapping', []);
        return $mapping[strtolower($type)] ?? null;
    }

    /**
     * –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
     */
    private function mapCallStatus(?string $status): ?string
    {
        if (empty($status)) {
            return null;
        }

        $mapping = config('pbx.status_mapping', []);
        return $mapping[strtolower($status)] ?? null;
    }
}
