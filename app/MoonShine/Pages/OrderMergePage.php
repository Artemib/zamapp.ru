<?php

declare(strict_types=1);

namespace App\MoonShine\Pages;

use App\Models\Order;
use MoonShine\Laravel\Pages\Page;
use Illuminate\Support\Facades\Log;
use MoonShine\UI\Fields\Select;
use MoonShine\UI\Fields\Text;
use MoonShine\UI\Components\Layout\Box;
use MoonShine\UI\Components\TableBuilder;
use MoonShine\UI\Fields\ID;
use MoonShine\UI\Fields\Hidden;
use MoonShine\UI\Components\Layout\Div;
use MoonShine\UI\Components\ActionButton;
use MoonShine\UI\Fields\Checkbox;
#[\MoonShine\MenuManager\Attributes\SkipMenu]

class OrderMergePage extends Page
{
    protected string $title = '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤';
    protected ?string $alias = 'order-merge';

    protected function components(): array
    {
        return [
            Box::make('–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤', [
                Div::make([
                    '<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; align-items: end;">
                        <div>
                            <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #495057;">–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑ (–±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω):</label>
                            <select name="source_order_id" id="source_order_id" style="width: 100%; padding: 10px; border: 1px solid #ced4da; border-radius: 4px; font-size: 14px;" onchange="updateTargetOptions()">
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑...</option>
                            </select>
                        </div>
                        <div>
                            <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #495057;">–ó–∞–∫–∞–∑ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω):</label>
                            <select name="target_order_id" id="target_order_id" style="width: 100%; padding: 10px; border: 1px solid #ced4da; border-radius: 4px; font-size: 14px;" onchange="updateSourceOptions()">
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑...</option>
                            </select>
                        </div>
                    </div>'
                ])
            ]),
            
            Box::make('–î–µ–π—Å—Ç–≤–∏—è', [
                Div::make([
                    "<button type=\"button\" onclick=\"showMergeModal()\" class=\"btn btn-primary\" style=\"background: #3b82f6; color: white; padding: 12px 24px; border: none; border-radius: 6px; cursor: pointer; font-size: 16px;\">
                        üîÑ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∑–∞–∫–∞–∑—ã
                    </button>
                    
                    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ -->
                    <div id=\"mergeModal\" class=\"modal\" style=\"display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5);\">
                        <div class=\"modal-content\" style=\"background-color: #fefefe; margin: 2% auto; padding: 0; border: none; border-radius: 8px; width: 90%; max-width: 1000px; box-shadow: 0 4px 20px rgba(0,0,0,0.3);\">
                            <div class=\"modal-header\" style=\"padding: 20px; border-bottom: 1px solid #dee2e6; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 8px 8px 0 0;\">
                                <h3 style=\"margin: 0; font-size: 20px;\">üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤</h3>
                                <span class=\"close\" onclick=\"closeMergeModal()\" style=\"color: white; float: right; font-size: 28px; font-weight: bold; cursor: pointer; line-height: 1;\">&times;</span>
                            </div>
                            <div class=\"modal-body\" style=\"padding: 20px; max-height: 75vh; overflow-y: auto;\">
                                <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px;\">
                                    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä -->
                                    <div id=\"preview-data\" style=\"margin-bottom: 20px;\">
                                        <h5 style=\"color: #495057; margin-bottom: 15px; font-size: 16px;\">üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π:</h5>
                                        <div id=\"preview-content\" style=\"min-height: 300px;\"></div>
                                    </div>
                                    
                                    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -->
                                    <div style=\"margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 6px; border-left: 4px solid #007bff; height: fit-content;\">
                                        <h5 style=\"margin: 0 0 15px 0; color: #495057; font-size: 16px;\">‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:</h5>
                                        <div style=\"display: flex; flex-direction: column; gap: 12px;\">
                                            <label class=\"field-checkbox\" style=\"display: flex; align-items: center; cursor: pointer; padding: 12px; border-radius: 6px; transition: all 0.3s ease; border: 2px solid transparent;\">
                                                <input type=\"checkbox\" id=\"merge_city\" checked onchange=\"toggleField('city')\" style=\"margin-right: 12px; transform: scale(1.3);\"> 
                                                <span style=\"font-size: 14px; font-weight: 500;\">üèôÔ∏è –ì–æ—Ä–æ–¥</span>
                                            </label>
                                            <label class=\"field-checkbox\" style=\"display: flex; align-items: center; cursor: pointer; padding: 12px; border-radius: 6px; transition: all 0.3s ease; border: 2px solid transparent;\">
                                                <input type=\"checkbox\" id=\"merge_address\" checked onchange=\"toggleField('address')\" style=\"margin-right: 12px; transform: scale(1.3);\"> 
                                                <span style=\"font-size: 14px; font-weight: 500;\">üìç –ê–¥—Ä–µ—Å</span>
                                            </label>
                                            <label class=\"field-checkbox\" style=\"display: flex; align-items: center; cursor: pointer; padding: 12px; border-radius: 6px; transition: all 0.3s ease; border: 2px solid transparent;\">
                                                <input type=\"checkbox\" id=\"merge_phone\" checked onchange=\"toggleField('phone')\" style=\"margin-right: 12px; transform: scale(1.3);\"> 
                                                <span style=\"font-size: 14px; font-weight: 500;\">üìû –¢–µ–ª–µ—Ñ–æ–Ω</span>
                                            </label>
                                            <label class=\"field-checkbox\" style=\"display: flex; align-items: center; cursor: pointer; padding: 12px; border-radius: 6px; transition: all 0.3s ease; border: 2px solid transparent;\">
                                                <input type=\"checkbox\" id=\"merge_additional_info\" checked onchange=\"toggleField('additional_info')\" style=\"margin-right: 12px; transform: scale(1.3);\"> 
                                                <span style=\"font-size: 14px; font-weight: 500;\">üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
                                            </label>
                                        </div>
                                        
                                        <div style=\"margin-top: 20px; padding: 15px; background: #fff3cd; border-radius: 6px; border-left: 4px solid #ffc107;\">
                                            <h6 style=\"margin: 0 0 8px 0; color: #856404; font-size: 14px;\">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</h6>
                                            <p style=\"margin: 0; color: #856404; font-size: 12px; line-height: 1.4;\">–°–Ω–∏–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É —Å –ø–æ–ª—è, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –≤ —Å–ª–∏—è–Ω–∏–∏. –ü–æ–ª–µ —Å—Ç–∞–Ω–µ—Ç —Å–µ—Ä—ã–º –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class=\"modal-footer\" style=\"padding: 20px; border-top: 1px solid #dee2e6; background: #f8f9fa; border-radius: 0 0 8px 8px; text-align: right;\">
                                <button type=\"button\" onclick=\"closeMergeModal()\" class=\"btn btn-secondary\" style=\"background: #6c757d; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;\">
                                    ‚ùå –û—Ç–º–µ–Ω–∞
                                </button>
                                <button type=\"button\" onclick=\"confirmMerge()\" class=\"btn btn-success\" style=\"background: #28a745; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;\">
                                    ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ª–∏—è–Ω–∏–µ
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <style>
                        .field-checkbox:hover {
                            background-color: #e9ecef !important;
                        }
                        .field-checkbox.disabled {
                            opacity: 0.5;
                            background-color: #f8f9fa !important;
                            border-color: #dee2e6 !important;
                        }
                        .field-checkbox.disabled span {
                            color: #6c757d !important;
                        }
                        .field-checkbox.disabled input[type=\"checkbox\"] {
                            opacity: 0.5;
                        }
                        .field-preview {
                            transition: all 0.3s ease;
                            opacity: 1;
                        }
                        .field-preview.disabled {
                            opacity: 0.4;
                            background-color: #f8f9fa !important;
                            border-color: #dee2e6 !important;
                        }
                        .field-preview.disabled .field-label {
                            color: #6c757d !important;
                        }
                        .field-preview.disabled .field-current,
                        .field-preview.disabled .field-new {
                            color: #6c757d !important;
                        }
                        .modal-content {
                            animation: modalSlideIn 0.3s ease-out;
                        }
                        @keyframes modalSlideIn {
                            from {
                                opacity: 0;
                                transform: translateY(-50px);
                            }
                            to {
                                opacity: 1;
                                transform: translateY(0);
                            }
                        }
                    </style>
                    
                    <script>
                        let sourceOrderData = null;
                        let targetOrderData = null;
                        let allOrders = [];
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        document.addEventListener('DOMContentLoaded', function() {
                            loadOrdersData();
                        });
                        
                        function loadOrdersData() {
                            const sourceSelect = document.getElementById('source_order_id');
                            const targetSelect = document.getElementById('target_order_id');
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                            sourceSelect.innerHTML = '<option value=\"\">‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...</option>';
                            targetSelect.innerHTML = '<option value=\"\">‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...</option>';
                            
                            fetch('/admin/page/order-merge/get-orders-list', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    allOrders = data.orders;
                                    populateSelects();
                                } else {
                                    sourceSelect.innerHTML = '<option value=\"\">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
                                    targetSelect.innerHTML = '<option value=\"\">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
                                }
                            })
                            .catch(error => {
                                console.error('Error loading orders:', error);
                                sourceSelect.innerHTML = '<option value=\"\">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
                                targetSelect.innerHTML = '<option value=\"\">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
                            });
                        }
                        
                        function populateSelects() {
                            const sourceSelect = document.getElementById('source_order_id');
                            const targetSelect = document.getElementById('target_order_id');
                            
                            // –û—á–∏—â–∞–µ–º —Å–µ–ª–µ–∫—Ç—ã
                            sourceSelect.innerHTML = '<option value=\"\">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑...</option>';
                            targetSelect.innerHTML = '<option value=\"\">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑...</option>';
                            
                            // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏—è–º–∏
                            allOrders.forEach(function(order) {
                                const optionText = '–ó–∞–∫–∞–∑ #' + order.id + ' - ' + order.order_datetime_formatted + ' - ' + order.city;
                                
                                const sourceOption = new Option(optionText, order.id);
                                const targetOption = new Option(optionText, order.id);
                                
                                sourceSelect.add(sourceOption);
                                targetSelect.add(targetOption);
                            });
                        }
                        
                        function updateTargetOptions() {
                            const sourceSelect = document.getElementById('source_order_id');
                            const targetSelect = document.getElementById('target_order_id');
                            const selectedSourceId = sourceSelect.value;
                            const currentTargetValue = targetSelect.value;
                            
                            // –û—á–∏—â–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Å–µ–ª–µ–∫—Ç
                            targetSelect.innerHTML = '<option value=\"\">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑...</option>';
                            
                            // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏—è–º–∏, –∏—Å–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤ –∏—Å—Ö–æ–¥–Ω–æ–º
                            allOrders.forEach(function(order) {
                                if (order.id != selectedSourceId) {
                                    const optionText = '–ó–∞–∫–∞–∑ #' + order.id + ' - ' + order.order_datetime_formatted + ' - ' + order.city;
                                    const option = new Option(optionText, order.id);
                                    targetSelect.add(option);
                                }
                            });
                            
                            // –ï—Å–ª–∏ –≤ —Ü–µ–ª–µ–≤–æ–º —Å–µ–ª–µ–∫—Ç–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ –∑–∞–∫–∞–∑, —á—Ç–æ –∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
                            if (currentTargetValue == selectedSourceId) {
                                targetSelect.value = '';
                            } else if (currentTargetValue && currentTargetValue != selectedSourceId) {
                                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç
                                targetSelect.value = currentTargetValue;
                            }
                        }
                        
                        function updateSourceOptions() {
                            const sourceSelect = document.getElementById('source_order_id');
                            const targetSelect = document.getElementById('target_order_id');
                            const selectedTargetId = targetSelect.value;
                            const currentSourceValue = sourceSelect.value;
                            
                            // –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç
                            sourceSelect.innerHTML = '<option value=\"\">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑...</option>';
                            
                            // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏—è–º–∏, –∏—Å–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤ —Ü–µ–ª–µ–≤–æ–º
                            allOrders.forEach(function(order) {
                                if (order.id != selectedTargetId) {
                                    const optionText = '–ó–∞–∫–∞–∑ #' + order.id + ' - ' + order.order_datetime_formatted + ' - ' + order.city;
                                    const option = new Option(optionText, order.id);
                                    sourceSelect.add(option);
                                }
                            });
                            
                            // –ï—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–µ–ª–µ–∫—Ç–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ –∑–∞–∫–∞–∑, —á—Ç–æ –∏ –≤ —Ü–µ–ª–µ–≤–æ–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
                            if (currentSourceValue == selectedTargetId) {
                                sourceSelect.value = '';
                            } else if (currentSourceValue && currentSourceValue != selectedTargetId) {
                                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç
                                sourceSelect.value = currentSourceValue;
                            }
                        }
                        
                        function showMergeModal() {
                            const sourceId = document.querySelector('select[name=\"source_order_id\"]').value;
                            const targetId = document.querySelector('select[name=\"target_order_id\"]').value;
                            
                            if (!sourceId || !targetId) {
                                alert('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è');
                                return;
                            }
                            
                            if (sourceId === targetId) {
                                alert('–ù–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π');
                                return;
                            }
                            
                            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ–≤
                            const sourceSelect = document.querySelector('select[name=\"source_order_id\"]');
                            const targetSelect = document.querySelector('select[name=\"target_order_id\"]');
                            
                            sourceOrderData = {
                                id: sourceId,
                                text: sourceSelect.options[sourceSelect.selectedIndex].text
                            };
                            
                            targetOrderData = {
                                id: targetId,
                                text: targetSelect.options[targetSelect.selectedIndex].text
                            };
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                            document.getElementById('mergeModal').style.display = 'block';
                            updatePreview();
                        }
                        
                        function closeMergeModal() {
                            document.getElementById('mergeModal').style.display = 'none';
                            // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            window.currentSourceOrder = null;
                            window.currentTargetOrder = null;
                        }
                        
                        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
                        window.onclick = function(event) {
                            const modal = document.getElementById('mergeModal');
                            if (event.target === modal) {
                                closeMergeModal();
                            }
                        }
                        
                        function updatePreview() {
                            if (!sourceOrderData || !targetOrderData) return;
                            
                            const previewContent = document.getElementById('preview-content');
                            
                            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π
                            if (window.currentSourceOrder && window.currentTargetOrder) {
                                showDetailedPreview(window.currentSourceOrder, window.currentTargetOrder);
                                return;
                            }
                            
                            previewContent.innerHTML = '<div style=\"text-align: center; padding: 20px;\">‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤...</div>';
                            
                            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ AJAX
                            fetch('/admin/page/order-merge/get-orders-data', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')
                                },
                                body: JSON.stringify({
                                    source_order_id: sourceOrderData.id,
                                    target_order_id: targetOrderData.id
                                })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
                                    window.currentSourceOrder = data.source_order;
                                    window.currentTargetOrder = data.target_order;
                                    showDetailedPreview(data.source_order, data.target_order);
                                } else {
                                    previewContent.innerHTML = '<div style=\"color: #dc3545;\">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</div>';
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                previewContent.innerHTML = '<div style=\"color: #dc3545;\">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</div>';
                            });
                        }
                        
                        function showDetailedPreview(sourceOrder, targetOrder) {
                            const previewContent = document.getElementById('preview-content');
                            const mergeFields = ['city', 'address', 'phone', 'additional_info'];
                            const fieldNames = {
                                'city': '–ì–æ—Ä–æ–¥',
                                'address': '–ê–¥—Ä–µ—Å', 
                                'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
                                'additional_info': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
                            };
                            
                            let previewHtml = '<div style=\"font-size: 14px;\">';
                            previewHtml += '<div style=\"margin-bottom: 20px; padding: 15px; background: #e3f2fd; border-radius: 6px; border-left: 4px solid #2196f3;\">';
                            previewHtml += '<p style=\"margin: 0; font-weight: 500;\"><strong>–ó–∞–∫–∞–∑ #' + sourceOrder.id + '</strong> (–æ—Å–Ω–æ–≤–Ω–æ–π, –¥–∞—Ç–∞: ' + sourceOrder.order_datetime_formatted + ')</p>';
                            previewHtml += '<p style=\"margin: 5px 0 0 0;\">–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ <strong>–ó–∞–∫–∞–∑–∞ #' + targetOrder.id + '</strong> (–¥–∞—Ç–∞: ' + targetOrder.order_datetime_formatted + ')</p>';
                            previewHtml += '</div>';
                            
                            mergeFields.forEach(field => {
                                const checkbox = document.getElementById('merge_' + field);
                                const isChecked = checkbox && checkbox.checked;
                                const currentValue = sourceOrder[field] || '<em>–ø—É—Å—Ç–æ</em>';
                                const newValue = targetOrder[field] || '<em>–ø—É—Å—Ç–æ</em>';
                                
                                const disabledClass = isChecked ? '' : ' disabled';
                                
                                previewHtml += '<div id=\"preview-' + field + '\" class=\"field-preview' + disabledClass + '\" style=\"margin: 12px 0; padding: 15px; border: 1px solid #ddd; border-radius: 6px; background: #f8f9fa; border-left: 4px solid #28a745;\">';
                                previewHtml += '<div class=\"field-label\" style=\"font-weight: 600; margin-bottom: 8px; color: #495057;\">' + fieldNames[field] + ':</div>';
                                previewHtml += '<div class=\"field-current\" style=\"color: #dc3545; margin-bottom: 4px; font-size: 13px;\">‚ùå –¢–µ–∫—É—â–µ–µ: ' + currentValue + '</div>';
                                previewHtml += '<div class=\"field-new\" style=\"color: #28a745; font-size: 13px;\">‚úÖ –ù–æ–≤–æ–µ: ' + newValue + '</div>';
                                previewHtml += '</div>';
                            });
                            
                            previewHtml += '<div style=\"margin-top: 20px; padding: 15px; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; border-left: 4px solid #ffc107;\">';
                            previewHtml += '<strong style=\"color: #856404;\">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> <span style=\"color: #856404;\">–ó–∞–∫–∞–∑ #' + targetOrder.id + ' –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ —Å–ª–∏—è–Ω–∏—è</span>';
                            previewHtml += '</div>';
                            previewHtml += '</div>';
                            
                            previewContent.innerHTML = previewHtml;
                        }
                        
                        function toggleField(field) {
                            const checkbox = document.getElementById('merge_' + field);
                            const previewElement = document.getElementById('preview-' + field);
                            const labelElement = checkbox.closest('.field-checkbox');
                            
                            if (checkbox.checked) {
                                // –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ
                                previewElement.classList.remove('disabled');
                                labelElement.classList.remove('disabled');
                            } else {
                                // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ
                                previewElement.classList.add('disabled');
                                labelElement.classList.add('disabled');
                            }
                        }
                        
                        function cancelMerge() {
                            closeMergeModal();
                        }
                        
                        function confirmMerge() {
                            const sourceId = document.querySelector('select[name=\"source_order_id\"]').value;
                            const targetId = document.querySelector('select[name=\"target_order_id\"]').value;
                            
                            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —ç—Ç–∏ –∑–∞–∫–∞–∑—ã? –í—Ç–æ—Ä–æ–π –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.')) {
                                return;
                            }
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
                            const form = document.createElement('form');
                            form.method = 'POST';
                            form.action = '/admin/page/order-merge';
                            
                            const csrfToken = document.createElement('input');
                            csrfToken.type = 'hidden';
                            csrfToken.name = '_token';
                            csrfToken.value = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');
                            
                            const sourceField = document.createElement('input');
                            sourceField.type = 'hidden';
                            sourceField.name = 'source_order_id';
                            sourceField.value = sourceId;
                            
                            const targetField = document.createElement('input');
                            targetField.type = 'hidden';
                            targetField.name = 'target_order_id';
                            targetField.value = targetId;
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                            const mergeFields = ['city', 'address', 'phone', 'additional_info'];
                            mergeFields.forEach(field => {
                                const checkbox = document.getElementById('merge_' + field);
                                if (checkbox && checkbox.checked) {
                                    const fieldInput = document.createElement('input');
                                    fieldInput.type = 'hidden';
                                    fieldInput.name = 'merge_fields[]';
                                    fieldInput.value = field;
                                    form.appendChild(fieldInput);
                                }
                            });
                            
                            form.appendChild(csrfToken);
                            form.appendChild(sourceField);
                            form.appendChild(targetField);
                            
                            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                            closeMergeModal();
                            
                            document.body.appendChild(form);
                            form.submit();
                        }
                    </script>"
                ])
            ])
        ];
    }


    public static function merge_orders()
    {
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        Log::info('merge_orders method called', [
            'source_order_id' => request('source_order_id'),
            'target_order_id' => request('target_order_id'),
            'merge_fields' => request('merge_fields', []),
            'all_request' => request()->all()
        ]);
        
        $sourceOrderId = request('source_order_id');
        $targetOrderId = request('target_order_id');
        
        if (!$sourceOrderId || !$targetOrderId) {
            session()->flash('error', '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è');
            return;
        }
        
        if ($sourceOrderId === $targetOrderId) {
            session()->flash('error', '–ù–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π');
            return;
        }
        
        $sourceOrder = Order::find($sourceOrderId);
        $targetOrder = Order::find($targetOrderId);
        
        Log::info('Found orders', [
            'source_order' => $sourceOrder ? $sourceOrder->toArray() : null,
            'target_order' => $targetOrder ? $targetOrder->toArray() : null
        ]);
        
        if (!$sourceOrder || !$targetOrder) {
            Log::error('One of orders not found', [
                'source_order_id' => $sourceOrderId,
                'target_order_id' => $targetOrderId,
                'source_found' => $sourceOrder !== null,
                'target_found' => $targetOrder !== null
            ]);
            session()->flash('error', '–û–¥–∏–Ω –∏–∑ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        try {
            Log::info('About to call mergeWith', [
                'source_order_id' => $sourceOrder->id,
                'target_order_id' => $targetOrder->id
            ]);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
            $mergeFields = request('merge_fields', []);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ mergeWith –∏–∑ –º–æ–¥–µ–ª–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            $sourceOrder->mergeWith($targetOrder, $mergeFields);
            
            Log::info('mergeWith completed successfully');
            
            $mergeFields = request('merge_fields', []);
            $fieldsText = empty($mergeFields) ? '–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è' : implode(', ', $mergeFields);
            
            session()->flash('success', "‚úÖ –ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã! –ó–∞–∫–∞–∑ #{$targetOrderId} –æ–±—ä–µ–¥–∏–Ω–µ–Ω —Å –∑–∞–∫–∞–∑–æ–º #{$sourceOrderId}. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –ø–æ–ª—è: {$fieldsText}. –ó–∞–∫–∞–∑ #{$targetOrderId} —É–¥–∞–ª–µ–Ω.");
            
            return redirect()->route('moonshine.page', ['pageUri' => 'order-merge']);
        } catch (\Exception $e) {
            Log::error('Error merging orders: ' . $e->getMessage());
            session()->flash('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: ' . $e->getMessage());
        }
        
        return redirect()->route('moonshine.page', ['pageUri' => 'order-merge']);
    }

    public static function getOrdersData()
    {
        $sourceOrderId = request('source_order_id');
        $targetOrderId = request('target_order_id');
        
        if (!$sourceOrderId || !$targetOrderId) {
            return response()->json([
                'success' => false,
                'message' => '–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –∑–∞–∫–∞–∑–æ–≤'
            ]);
        }
        
        $sourceOrder = Order::find($sourceOrderId);
        $targetOrder = Order::find($targetOrderId);
        
        if (!$sourceOrder || !$targetOrder) {
            return response()->json([
                'success' => false,
                'message' => '–û–¥–∏–Ω –∏–∑ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            ]);
        }
        
        return response()->json([
            'success' => true,
            'source_order' => [
                'id' => $sourceOrder->id,
                'city' => $sourceOrder->city,
                'address' => $sourceOrder->address,
                'phone' => $sourceOrder->phone,
                'additional_info' => $sourceOrder->additional_info,
                'order_datetime_formatted' => $sourceOrder->order_datetime_formatted
            ],
            'target_order' => [
                'id' => $targetOrder->id,
                'city' => $targetOrder->city,
                'address' => $targetOrder->address,
                'phone' => $targetOrder->phone,
                'additional_info' => $targetOrder->additional_info,
                'order_datetime_formatted' => $targetOrder->order_datetime_formatted
            ]
        ]);
    }

    public static function getOrdersList()
    {
        $orders = Order::all()->map(function($order) {
            return [
                'id' => $order->id,
                'city' => $order->city,
                'address' => $order->address,
                'phone' => $order->phone,
                'additional_info' => $order->additional_info,
                'order_datetime_formatted' => $order->order_datetime_formatted
            ];
        });
        
        return response()->json([
            'success' => true,
            'orders' => $orders
        ]);
    }

    public function getBreadcrumbs(): array
    {
        return [
            route('moonshine.crud.index', ['resourceUri' => 'orders']) => '–ó–∞–∫–∞–∑—ã',
            '#' => $this->getTitle()
        ];
    }

    public function getTitle(): string
    {
        return $this->title ?: '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤';
    }
}
