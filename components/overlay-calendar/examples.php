<?php

/**
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OverlayCalendar
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 * –≤ MoonShine —Ä–µ—Å—É—Ä—Å—ã –∏ –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */

namespace App\MoonShine\Examples;

use App\MoonShine\UI\Components\OverlayCalendar;
use MoonShine\Resources\ModelResource;
use MoonShine\Actions\ActionButton;
use MoonShine\Fields\Text;
use MoonShine\Fields\Date;

// ========================================
// –ü–†–ò–ú–ï–† 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ Resource
// ========================================

class BasicResourceExample extends ModelResource
{
    public function topButtons(): array
    {
        return [
            ActionButton::make('üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥')
                ->onClick(fn() => 'document.querySelector(\'[x-data*="overlayCalendar"]\').__x.$data.toggleCalendar()')
        ];
    }

    public function pageComponents(): array
    {
        return [
            OverlayCalendar::make('date_range', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏')->render()
        ];
    }
}

// ========================================
// –ü–†–ò–ú–ï–† 2: –° –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
// ========================================

class PrefilledResourceExample extends ModelResource
{
    public function pageComponents(): array
    {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        $currentMonth = now()->format('Y-m-01') . '|' . now()->format('Y-m-t');
        
        return [
            OverlayCalendar::make('date_range', '–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞')
                ->value($currentMonth)
                ->render()
        ];
    }
}

// ========================================
// –ü–†–ò–ú–ï–† 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
// ========================================

class MultipleCalendarsExample extends ModelResource
{
    public function pageComponents(): array
    {
        return [
            // –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
            OverlayCalendar::make('start_date', '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞')->render(),
            
            // –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞  
            OverlayCalendar::make('end_date', '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è')->render(),
        ];
    }
}

// ========================================
// –ü–†–ò–ú–ï–† 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
// ========================================

class FilteredResourceExample extends ModelResource
{
    public function filters(): array
    {
        return [
            // –û–±—ã—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            Text::make('–ù–∞–∑–≤–∞–Ω–∏–µ'),
            Date::make('–°–æ–∑–¥–∞–Ω–æ'),
            
            // –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä
            OverlayCalendar::make('date_filter', '–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ')->render()
        ];
    }
}

// ========================================
// –ü–†–ò–ú–ï–† 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
// ========================================

class CalendarController
{
    public function processDateRange(Request $request)
    {
        $dateRange = $request->input('date_range');
        
        if (empty($dateRange)) {
            return response()->json(['error' => '–ü–µ—Ä–∏–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω'], 400);
        }
        
        // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
        if (strpos($dateRange, '|') !== false) {
            // –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            [$startDate, $endDate] = explode('|', $dateRange);
            $startDate = \Carbon\Carbon::parse($startDate);
            $endDate = \Carbon\Carbon::parse($endDate);
        } else {
            // –û–¥–Ω–∞ –¥–∞—Ç–∞
            $startDate = $endDate = \Carbon\Carbon::parse($dateRange);
        }
        
        // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        $records = YourModel::whereBetween('created_at', [$startDate, $endDate])->get();
        
        return response()->json([
            'success' => true,
            'start_date' => $startDate->format('Y-m-d'),
            'end_date' => $endDate->format('Y-m-d'),
            'records_count' => $records->count()
        ]);
    }
}

// ========================================
// –ü–†–ò–ú–ï–† 6: JavaScript –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
// ========================================

/*
// –í –≤–∞—à–µ–º JavaScript —Ñ–∞–π–ª–µ –∏–ª–∏ –≤ <script> —Ç–µ–≥–µ

document.addEventListener('DOMContentLoaded', function() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    document.addEventListener('change', function(e) {
        if (e.target.name === 'date_range') {
            const value = e.target.value;
            console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:', value);
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            fetch('/api/process-dates', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({ 
                    date_range: value,
                    action: 'filter_records'
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', data);
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                updateTable(data.records);
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞:', error);
            });
        }
    });
    
    // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    function openCalendar() {
        const calendar = document.querySelector('[x-data*="overlayCalendar"]');
        if (calendar && calendar.__x) {
            calendar.__x.$data.toggleCalendar();
        }
    }
    
    // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    function closeCalendar() {
        const calendar = document.querySelector('[x-data*="overlayCalendar"]');
        if (calendar && calendar.__x) {
            calendar.__x.$data.closeCalendar();
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    function getSelectedDateRange() {
        const input = document.querySelector('input[name="date_range"]');
        return input ? input.value : null;
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    function setSelectedDateRange(value) {
        const input = document.querySelector('input[name="date_range"]');
        if (input) {
            input.value = value;
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const calendar = document.querySelector('[x-data*="overlayCalendar"]');
            if (calendar && calendar.__x) {
                calendar.__x.$data.selectedValue = value;
            }
        }
    }
});
*/

// ========================================
// –ü–†–ò–ú–ï–† 7: –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
// ========================================

/*
// –î–æ–±–∞–≤—å—Ç–µ –≤ –≤–∞—à CSS —Ñ–∞–π–ª –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏

:root {
    --calendar-primary: #your-primary-color;
    --calendar-secondary: #your-secondary-color;
    --calendar-accent: #your-accent-color;
}

/* –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã */
.calendar-day.selected {
    background-color: var(--calendar-primary) !important;
}

.calendar-day.range-start-end {
    background-color: var(--calendar-accent) !important;
}

.calendar-btn-primary {
    background-color: var(--calendar-primary);
}

/* –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ */
.calendar-overlay-content {
    max-width: 1000px; /* –£–≤–µ–ª–∏—á–∏—Ç—å —à–∏—Ä–∏–Ω—É */
}

.calendar-month-year {
    font-size: 20px; /* –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ */
}

/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ */
.calendar-overlay {
    transition: all 0.3s ease-in-out;
}

.calendar-day {
    transition: all 0.2s ease;
}

.calendar-day:hover {
    transform: scale(1.05);
}
*/

// ========================================
// –ü–†–ò–ú–ï–† 8: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–æ—Ä–º–∞–º–∏
// ========================================

class FormIntegrationExample
{
    public function createForm()
    {
        return [
            // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            Text::make('–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞'),
            Text::make('–û–ø–∏—Å–∞–Ω–∏–µ'),
            
            // –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            OverlayCalendar::make('report_period', '–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞')->render(),
            
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            ActionButton::make('–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç')
                ->onClick('submitReport()')
        ];
    }
}

// ========================================
// –ü–†–ò–ú–ï–† 9: API endpoints
// ========================================

/*
// –í routes/api.php

Route::post('/calendar/process', [CalendarController::class, 'processDateRange']);
Route::get('/calendar/quick-periods', [CalendarController::class, 'getQuickPeriods']);

// –í CalendarController

public function getQuickPeriods()
{
    $today = now();
    
    return response()->json([
        'today' => $today->format('Y-m-d'),
        'yesterday' => $today->subDay()->format('Y-m-d'),
        'current_week' => [
            'start' => $today->startOfWeek()->format('Y-m-d'),
            'end' => $today->endOfWeek()->format('Y-m-d')
        ],
        'current_month' => [
            'start' => $today->startOfMonth()->format('Y-m-d'),
            'end' => $today->endOfMonth()->format('Y-m-d')
        ]
    ]);
}
*/

// ========================================
// –ü–†–ò–ú–ï–† 10: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
// ========================================

/*
// –í —Ç–µ—Å—Ç–∞—Ö

class CalendarTest extends TestCase
{
    public function test_calendar_renders()
    {
        $calendar = OverlayCalendar::make('test_date', 'Test Calendar');
        $html = $calendar->render();
        
        $this->assertStringContainsString('overlay-calendar', $html);
        $this->assertStringContainsString('x-data="overlayCalendar', $html);
    }
    
    public function test_calendar_with_value()
    {
        $calendar = OverlayCalendar::make('test_date', 'Test Calendar')
            ->value('2024-01-15|2024-01-20');
            
        $html = $calendar->render();
        
        $this->assertStringContainsString('2024-01-15|2024-01-20', $html);
    }
}
*/
